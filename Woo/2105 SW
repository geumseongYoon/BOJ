#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <set>
#include <algorithm>
#include <string.h>
#include <queue>
#include <set>

using namespace std;


int T, N, answer;
int arr[21][21];
int visit[21][21];

int desert_check[101];

int dx[4] = { 1,-1,-1,1 };
int dy[4] = { 1,1,-1,-1 };


int boundary(int x, int y)
{
	return (x >= 0 && y >= 0 && x < N && y < N);
}

int sol(int x, int y, int count, int dir,int r,int l)
{
	


	//경로이탈 안되고, 같은 디저트 안되고, 

	//가는방향 쭉~ 이동
	if (boundary(x+dx[dir],y+dy[dir]) && desert_check[arr[y + dy[dir]][x + dx[dir]]]==0)
	{
		if (dir == 0) {
			desert_check[arr[y + dy[dir]][x + dx[dir]]] = 1;
			sol(x + dx[dir], y + dy[dir], count + 1, dir, r + 1,l);
			desert_check[arr[y + dy[dir]][x + dx[dir]]] = 0;
		}
		else if (dir == 1) {
			desert_check[arr[y + dy[dir]][x + dx[dir]]] = 1;
			sol(x + dx[dir], y + dy[dir], count + 1, dir, r, l+1);
			desert_check[arr[y + dy[dir]][x + dx[dir]]] = 0;
		}
		else if (dir == 2) {
			desert_check[arr[y + dy[dir]][x + dx[dir]]] = 1;
			sol(x + dx[dir], y + dy[dir], count + 1, dir, r -1, l );
			desert_check[arr[y + dy[dir]][x + dx[dir]]] = 0;

		}
		else if (dir == 3) {
			desert_check[arr[y + dy[dir]][x + dx[dir]]] = 1;
			sol(x + dx[dir], y + dy[dir], count + 1, dir, r , l -1);
			desert_check[arr[y + dy[dir]][x + dx[dir]]] = 0;

		}
	}

	//그 자리에서 꺽기
	if (boundary(x + dx[dir+1], y + dy[dir+1]) && desert_check[arr[y + dy[dir+1]][x + dx[dir+1]]] == 0 && visit[y][x]!=1)
	{
		if (dir == 0) {
			desert_check[arr[y + dy[dir + 1]][x + dx[dir + 1]]] = 1;
			sol(x + dx[dir + 1], y + dy[dir + 1], count + 1, dir + 1,r,l+1);
			desert_check[arr[y + dy[dir + 1]][x + dx[dir + 1]]] = 0;
		}
		else if (dir == 1) {
			desert_check[arr[y + dy[dir + 1]][x + dx[dir + 1]]] = 1;
			sol(x + dx[dir + 1], y + dy[dir + 1], count + 1, dir + 1, r-1, l);
			desert_check[arr[y + dy[dir + 1]][x + dx[dir + 1]]] = 0;
		}
		else if (dir == 2) {
			desert_check[arr[y + dy[dir + 1]][x + dx[dir + 1]]] = 1;
			sol(x + dx[dir + 1], y + dy[dir + 1], count + 1, dir + 1, r, l - 1);
			desert_check[arr[y + dy[dir + 1]][x + dx[dir + 1]]] = 0;
		}
	
	}


	//다음 경로가 처음 출발한 경로일때 
	//dir2일때는 2x2크기로 바로 회전할때, dir3일때는 진행방향 다음에 처음 시작위치일때(visit으로 체크) 
	if (((dir == 2 && visit[y + dy[dir+1]][x + dx[dir+1]] == 1) ||( dir ==3 && visit[y + dy[dir]][x + dx[dir]] == 1)) &&  r == 0 && l == 1)
	{
		//결과 출력
		if (answer < count)
			answer = count;
		return 0;
	}

}

int main()
{
	//대각선만 이동 사각형 
	scanf("%d", &T);

	for (int testcase = 1; testcase <= T; testcase++)
	{
		answer = 0;
		for (int i = 0; i < N; i++)
			for (int j = 0; j < N; j++)
				visit[i][j] = 0;
		for(int i=0;i<101;i++)
			desert_check[i]=0;

		scanf("%d", &N);
		for (int i = 0; i < N; i++)
			for (int j = 0; j < N; j++)
				scanf("%d", &arr[i][j]);

		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++)
			{
				visit[i][j] = 1;
				desert_check[arr[i][j]] = 1;
				sol(j, i, 1, 0,0,0);
				desert_check[arr[i][j]] = 0;
				visit[i][j] = 0;
			}

	}

		//디저트 경로가 없으면 
		if (answer == 0)
				answer = -1;


		//결과 출력
		printf("#%d %d\n", testcase, answer);
	}


}
