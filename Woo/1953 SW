#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <set>
#include <algorithm>
#include <string.h>
#include <queue>

using namespace std;


//파이프 이동 방향 
int pipe_dx[9][4] = { {-1,-1,-1,-1},{0,1,0,-1},{0,0,0,0},{0,1,0,-1},{0,1,0,0}, {0,1,0,0}, {0,0,0,-1}, {0,0,0,-1} };
int pipe_dy[9][4] = { {-1,-1,-1,-1},{-1,0,1,0},{-1,0,1,0},{0,0,0,0} ,{-1,0,0,0},{0,0,1,0},{0,0,1,0},{-1,0,0,0} };

int arr[51][51];
int visit[51][51];

int answer;

int T,N,M,R,C,L;

typedef struct str{
	int x, y, time;
}str;


int boundary(int x, int y)
{
	return (x >= 0 && y >= 0 && x < M && y < N);
}

int sol(int start_x,int start_y, int count, int b)
{
	queue<str> que;
		
	que.push({ start_x,start_y,count });
	
	while (!que.empty())
	{
		str temp = que.front();
		que.pop();

		if (temp.time == L)
			continue;
			
		int x = temp.x;
		int y = temp.y;

		for (int i = 0; i < 4; i++)
		{
			if (boundary(x + pipe_dx[arr[y][x]][i], y + pipe_dy[arr[y][x]][i]) && visit[y + pipe_dy[arr[y][x]][i]][x + pipe_dx[arr[y][x]][i]] == 0
				&& arr[y + pipe_dy[arr[y][x]][i]][x + pipe_dx[arr[y][x]][i]] != 0)
			{
				int nx = x + pipe_dx[arr[y][x]][i];
				int ny = y + pipe_dy[arr[y][x]][i];

				if (ny + pipe_dy[arr[ny][nx]][(i + 2) % 4] == y && nx + pipe_dx[arr[ny][nx]][(i + 2) % 4] == x) 
				{
					visit[y + pipe_dy[arr[y][x]][i]][x + pipe_dx[arr[y][x]][i]] = 1;
					que.push({ nx, ny,temp.time+1});
				}

			}

		}
	}
	return 0;
}



int main()
{
	scanf("%d", &T);
	
	for (int testcase = 1; testcase <= T; testcase++)
	{
	

		scanf("%d %d %d %d %d", &N, &M, &R, &C, &L);		//N세로, M가로, R세로,C가로

		//초기화
		answer = 0;

		//방문 초기화
		for (int i = 0; i < N; i++)
			for (int j = 0; j < M; j++)
				visit[i][j] = 0;

		for (int i = 0; i < N; i++)
			for (int j = 0; j < M; j++)
				scanf("%d", &arr[i][j]);

		
		visit[R][C] = 1;

		sol(C, R, 1, 0);

		//방문한 자리 카운트
		for (int i = 0; i < N; i++)
			for (int j = 0; j < M; j++) {
				if (visit[i][j] == 1)
					answer++;
			}
		printf("#%d %d\n",testcase, answer);
	}


}
